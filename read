#!/bin/bash

process () {
  read width height <<< $(getImageSize "in/$1")
  dWidth=$(($backgroundWidth - $width))
  dHeight=$(($backgroundHeight - $height))
  
  if [ "$dWidth" -lt 0 ] || [ "$dHeight" -lt 0 ]
  then
    error "background file too small"
  fi
  convert \
    \( "$background" -crop \
${width}x${height}+$(random $(($dWidth + 1)))+$(random $(($dHeight + 1))) \) \
    \( "in/$1" $(level) \) -fx "u[0] + u[1] - 1" "out/$(rename "$1")"
}

rename () {
  echo $1 | sed 's/\///g'
}

random () {
  echo $(( \
    $(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -f1 -d" ") % $1))
}

level () {
  if [ -n "$gamma" ]
  then
    echo "-level 0%,100%,$gamma"
  fi
}

getImageSize () {
  convert "$1" -format '%w %h' info:
}

countFilesInZip () {
  unzip -l "$1" | tail -n 1 | \
    sed -En 's/^ *[0-9]+ +([0-9]+) files/\1/p'
}

error () {
  echo "error: $1" 1>&2
  exit 255
}

while getopts "g:" OPTION
do
  case $OPTION in
    g) gamma=$OPTARG ;;
    \?) error "usage error" ;;
  esac
done

if [ -f background.png ]
then
  background=background.png
fi

if [ -z "$background" ]
then
  error "no background file"
fi

inputFile=${!OPTIND}
if [ -z "$inputFile" ]
then
  error "please specify input file"
fi

outputFile=$(basename "$(echo "$inputFile" | \
  sed 's/\(.*\)\.\(.*\)/\1/')"_converted.zip)

rm -rf in out "$outputFile"
mkdir in out

unzip -d in "$inputFile"

read backgroundWidth backgroundHeight <<< $(getImageSize $background)

find in -type f | sed 's/^in\///' | while read line
  do process "$line"
done

cd out
zip -r "../$outputFile" .
cd ..

if [ $(countFilesInZip "$inputFile") -ne $(countFilesInZip "$outputFile") ]
then
  error "number of ouput files does not match input files"
fi

rm -rf in out
# remove zip + temp on error
# put in clean function
#1st: match file count with dir
